import { app, BrowserWindow, ipcMain } from 'electron';
import { initializeDatabase } from './database/index';
import * as NodeModel from './database/models/node';
import * as TagModel from './database/models/tag';
import * as NodeTagModel from './database/models/nodeTag';

//world map 2d
import { initializeMapDatabase } from './components/Map2d/database/initializeDatabase';
// import * as NodePositionModel from './components/Map2d/database/models/nodePosition';
import * as NodePositionModel from './components/Map2d/database/models/nodePosition';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true, // should be true
      nodeIntegration: false, // should be false
      webviewTag: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  initializeDatabase();

  // world map 2d init
  initializeMapDatabase();
  //above is world map 2d init

  createWindow();

  //world map 2d
  ipcMain.handle('save-node-position', async (event, nodeId, x, y) => {
    NodePositionModel.saveNodePosition(nodeId, x, y);
  });

  ipcMain.handle('get-all-node-positions', async () => {
    return NodePositionModel.getAllNodePositions();
  });



  // above is world map 2d

  ipcMain.handle('get-nodes', async () => {
    const nodes = await NodeModel.getNodes();
    console.log('Fetched nodes:', nodes);
    return nodes;
  });
  

  ipcMain.handle('add-node', async (event, title, description) => {
    console.log('Adding node:', { title, description });
    return NodeModel.addNode(title, description);
  });

  ipcMain.handle('edit-node', async (event, nodeId, title, description) => {
    NodeModel.editNode(nodeId, title, description);
  });
  
  ipcMain.handle('delete-node', async (event, nodeId) => {
    console.log('IPC received delete request for nodeId:', nodeId);
    NodeModel.deleteNode(nodeId);
  });
  
  ipcMain.handle('get-tags', async () => {
    return TagModel.getTags();
  });

  ipcMain.handle('add-tag', async (event, tagName) => {
    return TagModel.addTag(tagName);
  });

  ipcMain.handle('edit-tag', async (event, tagId, tagName) => {
    TagModel.editTag(tagId, tagName);
  });

  ipcMain.handle('delete-tag', async (event, tagId) => {
    TagModel.deleteTag(tagId);
  });

  // main process index.ts
  ipcMain.handle('add-node-tag', async (event, nodeId, tagId) => {
    NodeTagModel.addNodeTag(nodeId, tagId);
  });

  ipcMain.handle('delete-node-tag', async (event, nodeId, tagId) => {
    NodeTagModel.deleteNodeTag(nodeId, tagId);
  });

  ipcMain.handle('get-node-tags', async (event, nodeId) => {
    return NodeTagModel.getNodeTags(nodeId);
  });

  ipcMain.handle('delete-node-tag-associations', async (event, tagId) => {
    try {
      NodeTagModel.deleteNodeTagAssociations(tagId);
      return { success: true };
    } catch (error) {
      console.error('Error in deleteNodeTagAssociations:', error);
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('get-node-title', async (event, nodeId) => {
    return NodeModel.getNodeTitle(nodeId); // Make sure you have this function implemented in your NodeModel
  });

  ipcMain.handle('get-nodes-by-tag-ids', async (event, tagIds) => {
    console.log("Received tagIds in main process:", tagIds); // Log received tagIds
    const nodes = await NodeTagModel.getNodesByTagIds(tagIds);
    console.log("Nodes fetched from DB:", nodes); // Log the nodes fetched from DB
    return nodes;
});


});
// app.on('ready', async () => {
//   await initializeDatabase();
//   createWindow();
// });


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.